"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./contexts/CreditIntelligenceContext.tsx":
/*!************************************************!*\
  !*** ./contexts/CreditIntelligenceContext.tsx ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CreditIntelligenceProvider: function() { return /* binding */ CreditIntelligenceProvider; },\n/* harmony export */   useCreditIntelligence: function() { return /* binding */ useCreditIntelligence; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"../node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\nconst CreditIntelligenceContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst CreditIntelligenceProvider = (param)=>{\n    let { children } = param;\n    _s();\n    const [profile, setProfile] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [analytics, setAnalytics] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [achievements, setAchievements] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [activeProofs, setActiveProofs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [privacyMode, setPrivacyModeState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [connectedAddress, setConnectedAddress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Mock data for demonstration - in real implementation, this would come from the service\n    const mockProfile = {\n        address: \"0x742d35Cc6634C0532925a3b8D4C9db96590b5b8c\",\n        linkedWallets: [\n            \"0x742d35Cc6634C0532925a3b8D4C9db96590b5b8c\"\n        ],\n        overallScore: 847,\n        tier: \"Platinum\",\n        dimensions: {\n            defiReliability: {\n                score: 892,\n                confidence: 94,\n                trend: \"improving\",\n                dataPoints: 156,\n                lastCalculated: Date.now(),\n                recommendations: [\n                    \"Continue consistent DeFi interactions\",\n                    \"Explore new protocols to diversify\"\n                ]\n            },\n            tradingConsistency: {\n                score: 734,\n                confidence: 87,\n                trend: \"stable\",\n                dataPoints: 89,\n                lastCalculated: Date.now(),\n                recommendations: [\n                    \"Maintain current trading patterns\",\n                    \"Consider longer-term positions\"\n                ]\n            },\n            stakingCommitment: {\n                score: 923,\n                confidence: 96,\n                trend: \"improving\",\n                dataPoints: 203,\n                lastCalculated: Date.now(),\n                recommendations: [\n                    \"Excellent staking behavior\",\n                    \"Consider staking in additional protocols\"\n                ]\n            },\n            governanceParticipation: {\n                score: 612,\n                confidence: 73,\n                trend: \"declining\",\n                dataPoints: 34,\n                lastCalculated: Date.now(),\n                recommendations: [\n                    \"Increase DAO participation\",\n                    \"Vote in upcoming proposals\",\n                    \"Join governance discussions\"\n                ]\n            },\n            liquidityProvider: {\n                score: 856,\n                confidence: 91,\n                trend: \"stable\",\n                dataPoints: 127,\n                lastCalculated: Date.now(),\n                recommendations: [\n                    \"Strong LP performance\",\n                    \"Consider impermanent loss protection strategies\"\n                ]\n            }\n        },\n        socialCredit: {\n            overallRating: 4.8,\n            totalTransactions: 47,\n            successRate: 98.2,\n            communityRank: 156,\n            referrals: 12,\n            trustScore: 892,\n            p2pLendingHistory: [],\n            communityFeedback: [],\n            disputeHistory: []\n        },\n        predictions: {\n            risk30d: 12,\n            risk90d: 18,\n            risk180d: 24,\n            confidence: 87,\n            insights: [\n                \"Strong DeFi engagement reduces short-term risk\",\n                \"Governance participation could improve long-term outlook\",\n                \"Market volatility may affect 180-day predictions\"\n            ],\n            marketVolatilityAdjustment: 1.2\n        },\n        achievements: [],\n        lastUpdated: Date.now()\n    };\n    const mockAnalytics = {\n        scoreHistory: [\n            {\n                timestamp: Date.now() - 86400000 * 30,\n                overallScore: 720,\n                dimensions: {}\n            },\n            {\n                timestamp: Date.now() - 86400000 * 15,\n                overallScore: 780,\n                dimensions: {}\n            },\n            {\n                timestamp: Date.now(),\n                overallScore: 847,\n                dimensions: {}\n            }\n        ],\n        behaviorTrends: [\n            {\n                category: \"DeFi Interactions\",\n                trend: 15,\n                change: \"increase\",\n                timeframe: \"30d\"\n            },\n            {\n                category: \"Staking Duration\",\n                trend: 8,\n                change: \"increase\",\n                timeframe: \"30d\"\n            },\n            {\n                category: \"Governance Votes\",\n                trend: -5,\n                change: \"decrease\",\n                timeframe: \"30d\"\n            },\n            {\n                category: \"LP Positions\",\n                trend: 12,\n                change: \"increase\",\n                timeframe: \"30d\"\n            }\n        ],\n        peerComparison: {\n            percentile: 87,\n            averageScore: 642,\n            userScore: 847,\n            totalUsers: 15420\n        },\n        transactionMetrics: {\n            totalTransactions: 89,\n            totalVolume: 234560,\n            uniqueProtocols: 8,\n            timeframe: \"30d\"\n        }\n    };\n    const mockAchievements = [\n        {\n            id: \"1\",\n            name: \"DeFi Pioneer\",\n            description: \"Complete your first DeFi transaction\",\n            rarity: \"common\",\n            progress: 1,\n            maxProgress: 1,\n            unlocked: true,\n            reward: \"+50 Social Credit\",\n            unlockedAt: Date.now() - 86400000 * 30\n        },\n        {\n            id: \"2\",\n            name: \"Trusted Lender\",\n            description: \"Successfully complete 10 P2P lending transactions\",\n            rarity: \"rare\",\n            progress: 8,\n            maxProgress: 10,\n            unlocked: false,\n            reward: \"+200 Social Credit + Lender Badge\"\n        },\n        {\n            id: \"3\",\n            name: \"Community Builder\",\n            description: \"Refer 5 users who achieve good credit scores\",\n            rarity: \"epic\",\n            progress: 3,\n            maxProgress: 5,\n            unlocked: false,\n            reward: \"+500 Social Credit + Referral Multiplier\"\n        }\n    ];\n    // Load data from API when address is connected\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (connectedAddress) {\n            loadProfileData(connectedAddress);\n        } else {\n            setProfile(null);\n            setAnalytics(null);\n            setAchievements([]);\n            setActiveProofs([]);\n        }\n    }, [\n        connectedAddress\n    ]);\n    const loadProfileData = async (address)=>{\n        setLoading(true);\n        try {\n            // Load profile from API\n            const profileResponse = await fetch(\"http://localhost:3001/api/credit-profile/\".concat(address));\n            if (profileResponse.ok) {\n                const profileData = await profileResponse.json();\n                setProfile(profileData);\n                setAchievements(profileData.achievements || []);\n            }\n            // Load analytics from API\n            const analyticsResponse = await fetch(\"http://localhost:3001/api/analytics/\".concat(address, \"?timeframe=30d\"));\n            if (analyticsResponse.ok) {\n                const analyticsData = await analyticsResponse.json();\n                setAnalytics(analyticsData);\n            }\n        } catch (error) {\n            console.error(\"Error loading profile data:\", error);\n            setError(\"Failed to load profile data\");\n        } finally{\n            setLoading(false);\n        }\n    };\n    const connectWallet = async (address)=>{\n        setLoading(true);\n        setError(null);\n        try {\n            setConnectedAddress(address);\n        // In real implementation, fetch actual data from the service\n        // const profile = await creditIntelligenceService.getCreditProfile(address);\n        // setProfile(profile);\n        } catch (err) {\n            setError(\"Failed to connect wallet and load profile\");\n            console.error(\"Wallet connection error:\", err);\n        } finally{\n            setLoading(false);\n        }\n    };\n    const disconnectWallet = ()=>{\n        setConnectedAddress(null);\n        setProfile(null);\n        setAnalytics(null);\n        setAchievements([]);\n        setActiveProofs([]);\n        setError(null);\n    };\n    const refreshProfile = async ()=>{\n        if (!connectedAddress) return;\n        setLoading(true);\n        try {\n            const response = await fetch(\"http://localhost:3001/api/credit-profile/\".concat(connectedAddress));\n            if (response.ok) {\n                const profileData = await response.json();\n                setProfile(profileData);\n                setAchievements(profileData.achievements || []);\n            } else {\n                setError(\"Failed to refresh profile\");\n            }\n        } catch (err) {\n            setError(\"Failed to refresh profile\");\n            console.error(\"Profile refresh error:\", err);\n        } finally{\n            setLoading(false);\n        }\n    };\n    const refreshAnalytics = async function() {\n        let timeframe = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"30d\";\n        if (!connectedAddress) return;\n        setLoading(true);\n        try {\n            // In real implementation:\n            // const analytics = await creditIntelligenceService.getAnalytics(connectedAddress, timeframe);\n            // setAnalytics(analytics);\n            // For now, just refresh the mock data\n            setAnalytics(mockAnalytics);\n        } catch (err) {\n            setError(\"Failed to refresh analytics\");\n            console.error(\"Analytics refresh error:\", err);\n        } finally{\n            setLoading(false);\n        }\n    };\n    const refreshAchievements = async ()=>{\n        if (!connectedAddress) return;\n        try {\n            // In real implementation:\n            // const achievements = await creditIntelligenceService.getAchievements(connectedAddress);\n            // setAchievements(achievements);\n            // For now, just refresh the mock data\n            setAchievements(mockAchievements);\n        } catch (err) {\n            setError(\"Failed to refresh achievements\");\n            console.error(\"Achievements refresh error:\", err);\n        }\n    };\n    const refreshProofs = async ()=>{\n        if (!connectedAddress) return;\n        try {\n            // In real implementation:\n            // const proofs = await creditIntelligenceService.getActiveProofs(connectedAddress);\n            // setActiveProofs(proofs);\n            // For now, use empty array\n            setActiveProofs([]);\n        } catch (err) {\n            setError(\"Failed to refresh proofs\");\n            console.error(\"Proofs refresh error:\", err);\n        }\n    };\n    const setPrivacyMode = (enabled)=>{\n        setPrivacyModeState(enabled);\n    // In real implementation, this might also update server-side preferences\n    };\n    const generateProof = async (type, options)=>{\n        if (!connectedAddress) return null;\n        setLoading(true);\n        try {\n            // In real implementation:\n            // const proof = await creditIntelligenceService.generateZKProof(connectedAddress, type, options);\n            // For now, create a mock proof\n            const mockProof = {\n                id: Date.now().toString(),\n                type,\n                status: \"ready\",\n                threshold: type === \"threshold\" ? options.threshold : undefined,\n                dimensions: type === \"selective\" ? options.dimensions : undefined,\n                proof: \"zk\".concat(Math.random().toString(36).substring(2)).concat(Date.now()),\n                timestamp: Date.now(),\n                expiresAt: Date.now() + 86400000 // 24 hours\n            };\n            setActiveProofs((prev)=>[\n                    mockProof,\n                    ...prev\n                ]);\n            return mockProof;\n        } catch (err) {\n            setError(\"Failed to generate proof\");\n            console.error(\"Proof generation error:\", err);\n            return null;\n        } finally{\n            setLoading(false);\n        }\n    };\n    const claimAchievement = async (achievementId)=>{\n        if (!connectedAddress) return false;\n        try {\n            // In real implementation:\n            // const success = await creditIntelligenceService.claimAchievement(connectedAddress, achievementId);\n            // For now, just mark as unlocked\n            setAchievements((prev)=>prev.map((achievement)=>achievement.id === achievementId ? {\n                        ...achievement,\n                        unlocked: true,\n                        unlockedAt: Date.now()\n                    } : achievement));\n            return true;\n        } catch (err) {\n            setError(\"Failed to claim achievement\");\n            console.error(\"Achievement claim error:\", err);\n            return false;\n        }\n    };\n    const exportData = async (options)=>{\n        if (!connectedAddress) return null;\n        try {\n            // In real implementation:\n            // return await creditIntelligenceService.exportAnalytics(connectedAddress, options);\n            // For now, create a mock export\n            const exportData = {\n                profile: privacyMode ? null : profile,\n                analytics: privacyMode ? null : analytics,\n                achievements,\n                timestamp: new Date().toISOString(),\n                privacyMode\n            };\n            return new Blob([\n                JSON.stringify(exportData, null, 2)\n            ], {\n                type: \"application/json\"\n            });\n        } catch (err) {\n            setError(\"Failed to export data\");\n            console.error(\"Data export error:\", err);\n            return null;\n        }\n    };\n    const value = {\n        // State\n        profile,\n        analytics,\n        achievements,\n        activeProofs,\n        loading,\n        error,\n        // User preferences\n        privacyMode,\n        connectedAddress,\n        // Actions\n        connectWallet,\n        disconnectWallet,\n        refreshProfile,\n        refreshAnalytics,\n        refreshAchievements,\n        refreshProofs,\n        setPrivacyMode,\n        generateProof,\n        claimAchievement,\n        exportData\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(CreditIntelligenceContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"E:\\\\BlockCreditScore\\\\frontend\\\\contexts\\\\CreditIntelligenceContext.tsx\",\n        lineNumber: 503,\n        columnNumber: 5\n    }, undefined);\n};\n_s(CreditIntelligenceProvider, \"hJO1dXMM86F7xpGg6F2fu6JUh/8=\");\n_c = CreditIntelligenceProvider;\nconst useCreditIntelligence = ()=>{\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(CreditIntelligenceContext);\n    if (context === undefined) {\n        throw new Error(\"useCreditIntelligence must be used within a CreditIntelligenceProvider\");\n    }\n    return context;\n};\n_s1(useCreditIntelligence, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n/* harmony default export */ __webpack_exports__[\"default\"] = (CreditIntelligenceContext);\nvar _c;\n$RefreshReg$(_c, \"CreditIntelligenceProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./contexts/CreditIntelligenceContext.tsx\n"));

/***/ })

});